{"mappings":"qhBAAAA,EAAA,S,4CCAA,IAAAC,EAAAD,EAAA,SCAAE,EAAAF,EAAA,S,aAIA,MAAMG,EAAoBD,EAAAE,QAAMC,OAAO,CACrCC,QAAS,8CAETC,QAAS,CAAEC,cAAe,UAAUC,EAAAC,gBAG/BC,eAAeC,IAGpB,aAFuBT,EAAkBU,OAEzBC,KAAKC,O,CCLhB,SAASC,EAAkBC,EAAKC,GAErC,OADmBC,KAAKC,MAAMC,aAAaC,QAAQL,KAChCM,MAAKC,GAAQA,EAAKN,KAAOO,OAAOP,MAAQ,I,+BCPtD,SAASQ,EAAsBF,GACpC,MAAMG,cACJA,EAAaC,YACbA,EAAWC,MACXA,EAAKC,aACLA,EAAYC,WACZA,EAAUC,WACVA,EAAUC,aACVA,EAAYC,UACZA,EAASC,SACTA,EAAQjB,GACRA,GACEM,EAEEY,EAAUpB,EAAkBP,EAAA4B,YAAanB,GAGzCoB,EAAeF,EAAU,SAAW,MACpCG,EAAUH,EAAU,yBAA2B,oBDjBhD,IAAoBI,ECwCzB,MAAO,+KArBSC,OAAOC,OAAOC,MAAQ,IAAMf,EAAcD,0BA0BvCE,uNAOwBA,iRAhCnBC,EAAac,WAAW,IAAK,qPA0CRX,+EAEAD,uMDhEpBQ,ECqBYT,EDpB9Bc,KAAKC,MAAe,GAATN,GAAe,2KC8BlB,EAAAO,EAAAC,gBACbd,EACAf,KAAKC,MAAMC,aAAaC,QAAQ,gMA6CSa,8DACSjB,UAAWoB,KAAgBC,4B,CCnF1E,SAASU,GAAkBrB,YAAEA,EAAWD,cAAEA,EAAaE,MAAEA,IAO3CY,OAAOS,WAAW,sBAArC,MAIMC,EAAMC,SAASC,cAAc,uBACnC,IAAKF,EAAK,OAAOG,QAAQC,IAAI,uBAE7B,MAAMC,EAAa,sCAAsC5B,IACnD6B,EAAe,sCAAsC9B,IAE3D,OAAIc,OAAOC,OAAOC,MAAQ,KAAOQ,EAAIO,MAAQF,EACnCL,EAAIO,IAAMF,EAGhBf,OAAOC,OAAOC,OAAS,KAAOQ,EAAIO,MAAQD,EACpCN,EAAIO,IAAMD,OADpB,C,CJdF,MAAME,EAAaP,SAASC,cAAc,kBAE1CZ,OAAOmB,iBAAiB,oBAExBjD,iBACE,IACE,MAAMkD,QAAuBjD,IACvBkD,GEdoBC,EFcQF,GEbvBhB,KAAKC,MAAMD,KAAKmB,SAAWD,EAAME,UFmChD,SAAwBC,EAAS,IAC/BP,EAAWQ,UAAYD,C,CAlBrBE,CAFe1C,EAAsBoC,IAKrC,MAAMO,EAAsBC,EAAArE,EAAA,EAC1B,IAAMgD,EAAkBa,IACxB,KAGFrB,OAAOmB,iBAAiB,SAAUS,E,CAElC,MAAOE,GACPjB,QAAQiB,MAAM,SAAUA,E,CE9BrB,IAAuBR,C","sources":["src/index.js","src/upcoming/upcoming.js","src/upcoming/api-service.js","src/upcoming/helpers.js","src/upcoming/create-upcoming-markup.js","src/upcoming/img-handler.js"],"sourcesContent":["import './javascript/loader';\nimport './javascript/stars-rating';\nimport './javascript/header';\nimport './javascript/hero';\nimport './javascript/weekly-trends-main';\nimport './upcoming/upcoming';\nimport './javascript/modal-trailer';\nimport './javascript/global-listener';\nimport './javascript/scroll-up';\n","import debounce from 'lodash.debounce';\nimport { getUpcomingMovies } from './api-service';\nimport { careateUpcomingMarkup } from './create-upcoming-markup';\nimport { handleUpcomingImg } from './img-handler';\nimport { getRandomItem } from './helpers';\n// import defaultImg from '../images/logo.png';\n\nconst upcomingEl = document.querySelector('.upcoming-card');\n\nwindow.addEventListener('DOMContentLoaded', handleUpcoming);\n\nasync function handleUpcoming() {\n  try {\n    const upcomingMovies = await getUpcomingMovies();\n    const randomMovie = getRandomItem(upcomingMovies);\n    // console.log(randomMovie);\n    \n    const markup = careateUpcomingMarkup(randomMovie);\n    \n    updateUpcoming(markup);\n    // handleUpcomingImg(randomMovie);\n\n    const debouncedImgHandler = debounce(\n      () => handleUpcomingImg(randomMovie),\n      200\n    );\n\n    window.addEventListener('resize', debouncedImgHandler);\n    //\n  } catch (error) {\n    console.error('error:', error);\n    // updateUpcoming(failMarkup)\n    ('ERR_BAD_REQUEST');\n  }\n}\n\nfunction updateUpcoming(markup = '') {\n  upcomingEl.innerHTML = markup;\n}\n\n\n","import axios from 'axios';\n// import { API_KEY } from '../fetch/api_key';\nimport { API_BAERER } from '../fetch/api_key';\n\nconst upcomingMoviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/movie/upcoming',\n  // params: { language: 'en-US', page: '1', region: 'UA' },\n  headers: { Authorization: `Bearer ${API_BAERER}` },\n});\n\nexport async function getUpcomingMovies() {\n  const response = await upcomingMoviesApi.get();\n  // console.log(response);\n  return response.data.results;\n}\n","export function getRandomItem(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function roundToTen(number) {\n  return Math.floor(number * 10) / 10;\n}\n\nexport function findFilmAtStorage(key, id) {\n  const savedFilms = JSON.parse(localStorage.getItem(key));\n  return savedFilms?.find(film => film.id === Number(id)) || null;\n}\n","import { roundToTen, findFilmAtStorage } from './helpers';\nimport { STORAGE_KEY } from '../fetch/api_key';\nimport { validateGenres } from '../javascript/weekly-trends-genres';\nexport function careateUpcomingMarkup(film) {\n  const {\n    backdrop_path,\n    poster_path,\n    title,\n    release_date,\n    popularity,\n    vote_count,\n    vote_average,\n    genre_ids,\n    overview,\n    id,\n  } = film;\n\n  const isSaved = findFilmAtStorage(STORAGE_KEY, id);\n  // console.log('myIsSaved', isSaved);\n\n  const btnAttribute = isSaved ? 'remove' : 'add';\n  const btnText = isSaved ? 'Remove from my library' : 'Add to my library';\n  //\n  const imgPath = window.screen.width < 768 ? poster_path : backdrop_path;\n  const transformedDate = release_date.replaceAll('-', '.');\n  const roundedPopularity = roundToTen(popularity);\n\n  // const trimedGenres = trimGenreList(['comedy', 'action', 'thriller']);\n\n  // function trimGenreList(genres) {\n  //   if (genres.length > 2) return `${genres.slice(0, 2).join(', ')}, ...`;\n  //   else return `${genres.join(', ')}`;\n  // }\n\n\n  const genres = validateGenres(\n    genre_ids,\n    JSON.parse(localStorage.getItem('genres'))\n  );\n  //console.log(genresPromise)\n  //const genres = await genresPromise;\n  //const genres = Promise.resolve(genresPromise).then(result => result);\n  //console.log(genres);\n\n  return `\n        <div class='upcoming-card__figure'>\n          <div class='upcoming-card__layout'></div>\n            <img\n              src=\"https://image.tmdb.org/t/p/original${imgPath}\"\n              alt=\"${title}\"\n              loading='lazy'\n              class='upcoming-card__img'\n            > \n          </div>\n        </div>\n        <div class='upcoming-card__body'>\n          <h3 class=\"upcoming-card__title\">${title}</h3>\n          <div class='metrics-list__main-container'>\n            <ul class=\"list metrics-list\">\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Release date</p>\n                <p class=\"metrics-text metrics-text--date\">${transformedDate}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Vote / Votes</p>\n                <p class=\"metrics-text metrics-text--vote\">\n                  <span class=\"vote-wrapper\">${vote_average}</span>\n                  /\n                  <span class=\"vote-wrapper\">${vote_count}</span>\n                </p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Popularity</p>\n                <p class=\"metrics-text\">${roundedPopularity}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Genre</p>\n                <p class=\"metrics-text\">${genres}</p>\n              </li>\n            </ul>\n          </div>\n          <h4 class=\"upcoming-card__subtitle metrics-text\">ABOUT</h4>\n            <p class=\"upcoming-card__text\">${overview}</p>\n          <button class=\"btn\" type=\"button\" data-id=${id} data-${btnAttribute}>${btnText}</button>\n        </div>`;\n}\n","export function handleUpcomingImg({ poster_path, backdrop_path, title }) {\n  // const imgContainerEl = document.querySelector('.upcoming-card__figure');\n  // if (!imgContainerEl) return console.log('no upcoming section');\n\n  // const imgIsPresent = imgContainerEl.firstElementChild?.nodeName === 'IMG';\n  // console.log(imgIsPresent);\n\n  const mediaWidth = window.matchMedia('(max-width: 767px)');\n  // mediaWidth.onchange(() => console.log('change media'));\n  // console.log(mediaWidth);\n\n  const img = document.querySelector('.upcoming-card__img');\n  if (!img) return console.log('no upcoming section');\n\n  const posterLink = `https://image.tmdb.org/t/p/original${poster_path}`;\n  const backdropLink = `https://image.tmdb.org/t/p/original${backdrop_path}`;\n\n  if (window.screen.width < 768 && img.src !== posterLink) {\n    return (img.src = posterLink);\n  }\n\n  if (window.screen.width >= 768 && img.src !== backdropLink) {\n    return (img.src = backdropLink);\n  }\n\n  // if (imgIsPresent && !mediaWidth.matches) {\n  //   clearElement(imgContainerEl);\n  // }\n\n  // if (imgIsPresent) return;\n\n  // if (mediaWidth.matches) {\n  //   const img = document.createElement('img');\n\n  //   const link = poster_path\n  //     ? `https://image.tmdb.org/t/p/original${poster_path}`\n  //     : defaultImg;\n\n  //   img.src = link;\n  //   img.alt = title;\n  //   img.loading = 'lazy';\n  //   img.classList.add('upcoming-card__poster');\n\n  //   console.log(img);\n  //   imgContainerEl.append(img);\n  // }\n}\n\nfunction checkMedia(url) {\n  x = window.matchMedia('(max-width: 767px)');\n  if (x.matches) return console.log(url);\n  console.log('more');\n}\n"],"names":["parcelRequire","$50Kfe","$2shzp","$8d13b1ce6cc74407$var$upcomingMoviesApi","default","create","baseURL","headers","Authorization","$l6Rnt","API_BAERER","async","$8d13b1ce6cc74407$export$577747a77907970f","get","data","results","$fcb42dc3b30a6297$export$404aba46ef5e4155","key","id","JSON","parse","localStorage","getItem","find","film","Number","$a21ab0e734481888$export$f4becdac8252a1ad","backdrop_path","poster_path","title","release_date","popularity","vote_count","vote_average","genre_ids","overview","isSaved","STORAGE_KEY","btnAttribute","btnText","number","window","screen","width","replaceAll","Math","floor","$5bV6Z","validateGenres","$6edd81693594a270$export$f5a341b7ca0be7a","matchMedia","img","document","querySelector","console","log","posterLink","backdropLink","src","$ed84471251116087$var$upcomingEl","addEventListener","upcomingMovies","randomMovie","array","random","length","markup","innerHTML","$ed84471251116087$var$updateUpcoming","debouncedImgHandler","$parcel$interopDefault","error"],"version":3,"file":"index.35aeadd9.js.map"}